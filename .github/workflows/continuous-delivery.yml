name: Continuous delivery

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  APPLICATION_NAME: tabby-connection-gateway

jobs:
  delivery:
    name: Continuous delivery
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version format
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/master" ] || [[ "$BRANCH" == refs/heads/hotfix/* ]]; then
            SUFFIX=""
          else
            SUFFIX="-${GITHUB_SHA::7}-dev"
          fi
          echo "VERSION_SUFFIX=${SUFFIX}" >> $GITHUB_ENV
        shell: bash

      - name: Calculate new semantic version automatically
        id: version_calculator
        uses: paulhatch/semantic-version@v5.4.0
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          version_format: "${major}.${minor}.${patch}${{ env.VERSION_SUFFIX }}"
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "json"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: false
          # If enabled, diagnostic information will be added to the action output.
          # debug: false
          # If true, the branch will be used to select the maximum version.
          version_from_branch: true

      - name: Store the new version in the environment
        run: |
          echo "New version: ${{ steps.version_calculator.outputs.version }}"
          echo "FULL_VERSION=${{ steps.version_calculator.outputs.version }}" >> $GITHUB_ENV

      - name: Path application version in the application
        run: |
          sed -i "s/version='.*'/version='${{ env.FULL_VERSION }}'/" setup.py
        shell: bash

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (multi-architecture)
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/${{ env.APPLICATION_NAME }}:${{ env.FULL_VERSION }} \
            -t ${{ secrets.DOCKER_USERNAME }}/${{ env.APPLICATION_NAME }}:latest \
            -f Dockerfile \
            --push .

      - name: Create annotated tag
        env:
          GITHUB_TOKEN: ${{ secrets.TABBY_GITHUB_TOKEN }}
        run: |
          gh release create v${{ env.FULL_VERSION }} --latest --prerelease --generate-notes --target ${{ github.sha }}
